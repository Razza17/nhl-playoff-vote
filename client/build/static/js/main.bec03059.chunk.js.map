{"version":3,"sources":["actions/Types.js","SetAuthToken.js","actions/Authentication.js","FullNavbars.js","components/Signup.js","components/Signin.js","actions/TeamsAction.js","actions/VoteAction.js","components/Vote.js","components/ChangeUser.js","components/UserVote.js","components/MonCompte.js","Content.js","App.js","reducers/TeamsReducer.js","reducers/VoteReducer.js","hocs/is-empty.js","reducers/AuthReducer.js","reducers/ErrorReducer.js","reducers/reducers.js","serviceWorker.js","index.js","images/nhl.svg"],"names":["GET_ERRORS","SET_CURRENT_USER","setAuthToken","token","axios","defaults","headers","common","updateUser","userID","newDatas","dispatch","put","catch","err","type","payload","loginUser","user","history","post","then","res","data","localStorage","setItem","decoded","jwt_decode","setCurrentUser","id","pseudo","push","getUser","getItem","logoutUser","removeItem","window","location","assign","FullNavbars","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","isAuthenticated","authNav","react_default","a","createElement","Navbar","Collapse","Nav","lib","to","NavItem","eventKey","pullRight","onClick","onLogout","bind","collapseOnSelect","Header","Brand","className","Toggle","Component","connect","auth","Signup","nom","prenom","email","password","password_confirm","errors","handleInputChange","assertThisInitialized","handleSubmit","e","setState","defineProperty","target","name","value","registerUser","nextProps","Grid","fluid","Col","xs","xsOffset","md","mdOffset","PanelGroup","Panel","Heading","Title","componentClass","Body","FormGroup","controlId","FormControl","classnames","is-invalid","placeholder","onChange","Button","Link","response","Signin","bindActionCreators","getTeams","get","postVote","vote","getVote","Vote","teamsSelected","teamId","checked","teamsArray","toConsumableArray","teamIndex","indexOf","splice","preventDefault","teamsLength","length","teamsDiff","userPseudo","teams","_this2","src","nhlLogo","alt","Form","onSubmit","onFormSubmit","map","i","lg","key","img","Checkbox","_id","onTeamChange","ChangeUser","modifyUser","newUserInfos","findDOMNode","refs","newNom","newPrenom","newPseudo","newEmail","InputGroup","defaultValue","ref","changeUser","UserVote","allTeams","team","MonCompte","_Component","modifyName","inherits","createClass","userData","components_ChangeUser","userVote","components_UserVote","Main","Switch","Route","exact","path","component","App","src_FullNavbars","Content","initialeState","error","isEmpty","undefined","keys","trim","initialState","combineReducers","arguments","action","objectSpread","concat","Boolean","hostname","match","composeEnhancer","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","reducers","applyMiddleware","promise","thunk","createLogger","ReactDOM","render","es","BrowserRouter","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.bec03059.chunk.js","sourcesContent":["export const GET_ERRORS = 'GET_ERRORS';\nexport const SET_CURRENT_USER = 'SET_CURRENT_USER';\n","import axios from 'axios';\n\nconst setAuthToken = token => {\n  if(token) {\n    axios.defaults.headers.common['Authorization'] = token;\n  }\n  else {\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}\n\nexport default setAuthToken;\n","import axios from 'axios';\nimport { GET_ERRORS, SET_CURRENT_USER } from './Types';\nimport setAuthToken from '../SetAuthToken';\nimport jwt_decode from 'jwt-decode';\n\nexport const registerUser = (user, history) => dispatch => {\n  axios.post('/user', user)\n  .then(res => history.push('/signin'))\n  .catch(err => {\n    dispatch({type: GET_ERRORS, payload: err.response.data});\n  });\n}\n\nexport const updateUser = (userID, newDatas) => dispatch => {\n  axios.put('/user/' + userID, newDatas)\n  .catch(err => {\n    dispatch({type: GET_ERRORS, payload: err});\n  });\n}\n\nexport const loginUser = (user, history) => dispatch => {\n  axios.post('/login', user)\n  .then(res => {\n    const { token } = res.data;\n    localStorage.setItem('jwtToken', token);\n    setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(setCurrentUser(decoded));\n    localStorage.setItem('userID', decoded.id);\n    localStorage.setItem('userPseudo', decoded.pseudo);\n    history.push('/vote')\n  })\n  .catch(err => {\n    dispatch({type: GET_ERRORS, payload: err});\n  });\n}\n\nexport const getUser = (userID) => dispatch => {\n  axios.post('/login', userID)\n  .then(res => {\n    let token = localStorage.getItem('jwtToken');\n    setAuthToken(token);\n    const decoded = jwt_decode(token);\n    dispatch(setCurrentUser(decoded));\n  })\n  .catch(err => {\n    dispatch({type: GET_ERRORS, payload: err});\n  });\n}\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: SET_CURRENT_USER,\n    payload: decoded\n  }\n}\n\nexport const logoutUser = () => dispatch => {\n  localStorage.removeItem('jwtToken');\n  localStorage.removeItem('userID');\n  localStorage.removeItem('userPseudo');\n  setAuthToken(false);\n  dispatch(setCurrentUser({}));\n  window.location.assign(\"/\");\n}\n","import React, { Component }  from 'react'\nimport { Nav, Navbar, NavItem } from 'react-bootstrap'\nimport { LinkContainer } from 'react-router-bootstrap'\nimport PropTypes from 'prop-types'\nimport { connect } from 'react-redux'\n\nimport { logoutUser } from './actions/Authentication'\n\nclass FullNavbars extends Component {\n\n    constructor(props) {\n        super(props)\n\n        let token = false\n\n        if(localStorage.getItem('jwtToken') !== \"\" && localStorage.getItem('jwtToken') !== null) {\n            token = true\n        }\n\n        this.state = {\n          isAuthenticated: token,\n        }\n    }\n\n    onLogout() {\n        this.props.logoutUser()\n    }\n\n    render() {\n        const authNav = (\n            <Navbar.Collapse>\n                <Nav>\n                    <LinkContainer to={\"/vote\"}>\n                        <NavItem eventKey={0}>Vote !</NavItem>\n                    </LinkContainer>\n                    <LinkContainer to={\"/classement\"}>\n                        <NavItem eventKey={1}>Classement</NavItem>\n                    </LinkContainer>\n                </Nav>\n                <Nav pullRight>\n                    <LinkContainer to={\"/monCompte\"}>\n                        <NavItem eventKey={2}>Mon Compte</NavItem>\n                    </LinkContainer>\n                    <NavItem eventKey={3} onClick={this.onLogout.bind(this)}>Me déconnecter</NavItem>\n                </Nav>\n            </Navbar.Collapse>\n        )\n        return (\n            <Navbar collapseOnSelect>\n                <Navbar.Header>\n                    <Navbar.Brand>\n                        <div className=\"navbar-brand\">NHL vote app</div>\n                    </Navbar.Brand>\n                    <Navbar.Toggle id='collapseButton' />\n                </Navbar.Header>\n                {this.state.isAuthenticated ? authNav : null}\n            </Navbar>\n        )\n    }\n}\n\nFullNavbars.propTypes = {\n    logoutUser: PropTypes.func.isRequired,\n    auth: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    auth: state.auth\n})\n\nexport default connect(mapStateToProps, { logoutUser })(FullNavbars);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom'\nimport { Grid, Col, FormGroup, FormControl, Button, PanelGroup, Panel } from 'react-bootstrap';\nimport { connect } from 'react-redux';\nimport PropTypes from 'prop-types';\nimport classnames from 'classnames';\n\nimport { registerUser } from \"../actions/Authentication\";\n\nclass Signup extends Component {\n    constructor() {\n        super();\n        this.state = {\n            nom: '',\n            prenom: '',\n            pseudo: '',\n            email: '',\n            password: '',\n            password_confirm: '',\n            errors: {}\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit() {\n        const user = {\n            nom: this.state.nom,\n            prenom: this.state.prenom,\n            pseudo: this.state.pseudo,\n            email: this.state.email,\n            password: this.state.password,\n            password_confirm: this.state.password_confirm\n        }\n        this.props.registerUser(user, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors\n            });\n        }\n    }\n\n    render() {\n        const { errors } = this.state;\n        return (\n            <Grid id=\"logup\" className=\"vertical-middle\" fluid>\n                <Col xs={6} xsOffset={3} md={4} mdOffset={4}>\n                    <PanelGroup id=\"logup-panel-group\">\n                        <Panel>\n                            <Panel.Heading>\n                                <Panel.Title componentClass=\"h2\">Créer ton compte</Panel.Title>\n                            </Panel.Heading>\n                            <Panel.Body>\n                                <FormGroup controlId=\"nom\">\n                                    <FormControl\n                                        type='text'\n                                        className={classnames('form-control form-control-lg', {\n                                            'is-invalid': errors.nom\n                                        })}\n                                        placeholder=\"Entre ton nom\"\n                                        name=\"nom\"\n                                        onChange={ this.handleInputChange }\n                                        value={ this.state.nom } />\n                                    {errors.nom && (<div className=\"invalid-feedback\">{errors.nom}</div>)}\n                                </FormGroup>\n                                <FormGroup controlId=\"prenom\">\n                                    <FormControl\n                                        type='text'\n                                        className={classnames('form-control form-control-lg', {\n                                            'is-invalid': errors.prenom\n                                        })}\n                                        placeholder=\"Entre ton prénom\"\n                                        name=\"prenom\"\n                                        onChange={ this.handleInputChange }\n                                        value={ this.state.prenom } />\n                                    {errors.prenom && (<div className=\"invalid-feedback\">{errors.prenom}</div>)}\n                                </FormGroup>\n                                <FormGroup controlId=\"pseudo\">\n                                    <FormControl\n                                        type='text'\n                                        className={classnames('form-control form-control-lg', {\n                                            'is-invalid': errors.pseudo\n                                        })}\n                                        placeholder=\"Entre ton pseudo\"\n                                        name=\"pseudo\"\n                                        onChange={ this.handleInputChange }\n                                        value={ this.state.pseudo } />\n                                    {errors.pseudo && (<div className=\"invalid-feedback\">{errors.pseudo}</div>)}\n                                </FormGroup>\n                                <FormGroup controlId=\"email\">\n                                    <FormControl\n                                        type='email'\n                                        className={classnames('form-control form-control-lg', {\n                                            'is-invalid': errors.email\n                                        })}\n                                        placeholder=\"Entre ton email\"\n                                        name=\"email\"\n                                        onChange={ this.handleInputChange }\n                                        value={ this.state.email } />\n                                    {errors.email && (<div className=\"invalid-feedback\">{errors.email}</div>)}\n                                </FormGroup>\n                                <FormGroup controlId=\"password\">\n                                    <FormControl\n                                        type='password'\n                                        className={classnames('form-control form-control-lg', {\n                                            'is-invalid': errors.password\n                                        })}\n                                        placeholder=\"Entre ton mot de passe\"\n                                        name=\"password\"\n                                        onChange={ this.handleInputChange }\n                                        value={ this.state.password } />\n                                    {errors.password && (<div className=\"invalid-feedback\">{errors.password}</div>)}\n                                </FormGroup>\n                                <FormGroup controlId=\"password_confirm\">\n                                    <FormControl\n                                        type='password'\n                                        className={classnames('form-control form-control-lg', {\n                                            'is-invalid': errors.password_confirm\n                                        })}\n                                        placeholder=\"Confirme ton mot de passe\"\n                                        name=\"password_confirm\"\n                                        onChange={ this.handleInputChange }\n                                        value={ this.state.password_confirm } />\n                                    {errors.password_confirm && (<div className=\"invalid-feedback\">{errors.password_confirm}</div>)}\n                                </FormGroup>\n                                <Button onClick={this.handleSubmit}>Enregistrer</Button>\n                                <Col xs={12} className='signup-to-signin'>\n                                    <Link to='/signin'>Sinon pour te connecter c'est par ici</Link>\n                                </Col>\n                            </Panel.Body>\n                        </Panel>\n                    </PanelGroup>\n                </Col>\n            </Grid>\n        )\n    }\n}\n\nSignup.propTypes = {\n    registerUser: PropTypes.func.isRequired,\n};\n\nconst mapStateToProps = state => ({\n    errors: state.errors\n});\n\nexport default connect(mapStateToProps, { registerUser })(Signup);\n","import React, { Component } from 'react';\nimport PropTypes from 'prop-types';\nimport { Grid, Col, FormGroup, FormControl, Button, PanelGroup, Panel } from 'react-bootstrap';\nimport { connect } from \"react-redux\";\nimport { bindActionCreators } from 'redux';\nimport classnames from 'classnames';\n\nimport { loginUser } from '../actions/Authentication';\n\nclass Signin extends Component {\n    constructor() {\n        super();\n        this.state = {\n            email: '',\n            password: '',\n            errors: {}\n        }\n        this.handleInputChange = this.handleInputChange.bind(this);\n        this.handleSubmit = this.handleSubmit.bind(this);\n    }\n\n    handleInputChange(e) {\n        this.setState({\n            [e.target.name]: e.target.value\n        })\n    }\n\n    handleSubmit() {\n        const user = {\n            email: this.state.email,\n            password: this.state.password,\n        }\n        this.props.loginUser(user, this.props.history);\n    }\n\n    componentWillReceiveProps(nextProps) {\n        if(nextProps.errors) {\n            this.setState({\n                errors: nextProps.errors.response.data\n            });\n        }\n    }\n\n    render() {\n        const {errors} = this.state;\n        return (\n            <Grid id=\"login\" className=\"vertical-middle\" fluid>\n                <Col xs={6} xsOffset={3} md={4} mdOffset={4}>\n                    <PanelGroup id=\"signinPanel\">\n                        <Panel>\n                            <Panel.Heading>\n                                <Panel.Title componentClass=\"h2\">Connecte toi</Panel.Title>\n                            </Panel.Heading>\n                            <Panel.Body>\n                                <FormGroup controlId=\"email\">\n                                    <FormControl\n                                        type='email'\n                                        placeholder=\"Entre ton email\"\n                                        className={classnames('form-control form-control-lg', {\n                                            'is-invalid': errors.email\n                                        })}\n                                        name=\"email\"\n                                        onChange={ this.handleInputChange }\n                                        value={ this.state.email } />\n                                    {errors.email && (<div className=\"invalid-feedback\">{errors.email}</div>)}\n                                </FormGroup>\n                                <FormGroup controlId=\"password\">\n                                    <FormControl\n                                        type='password'\n                                        placeholder=\"Entre ton mot de passe\"\n                                        className={classnames('form-control form-control-lg', {\n                                            'is-invalid': errors.password\n                                        })}\n                                        name=\"password\"\n                                        onChange={ this.handleInputChange }\n                                        value={ this.state.password } />\n                                    {errors.password && (<div className=\"invalid-feedback\">{errors.password}</div>)}\n                                </FormGroup>\n                                <Button onClick={this.handleSubmit}>Envoyer</Button>\n                            </Panel.Body>\n                        </Panel>\n                    </PanelGroup>\n                </Col>\n            </Grid>\n        )\n    }\n}\n\nSignin.propTypes = {\n    errors: PropTypes.object.isRequired\n}\n\nconst mapStateToProps = (state) => ({\n    errors: state.errors\n})\n\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators ({\n        loginUser\n    }, dispatch)\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Signin)\n","import axios from 'axios';\n\n// GET ARME\nexport function getTeams() {\n    return function(dispatch) {\n        axios.get('/teams')\n        .then(function(response) {\n            dispatch({type:\"GET_TEAMS\", payload:response.data})\n        })\n        .catch(function(err) {\n            dispatch({type:\"GET_TEAMS_REJECTED\", payload:err})\n        })\n    }\n}\n","import axios from 'axios';\n\n// POST VOTE\nexport function postVote(vote) {\n    return function(dispatch) {\n        axios.post('/vote', vote)\n        .then(function(response) {\n            dispatch({type:\"POST_VOTE\", payload:response.data})\n        })\n        .catch(function(err) {\n            dispatch({type:\"POST_VOTE_REJECTED\", payload:err})\n        })\n    }\n}\n\n// GET VOTE\nexport function getVote(id) {\n    return function(dispatch) {\n        axios.get('/vote/' + id)\n        .then(function(response) {\n            dispatch({type:\"GET_VOTE\", payload:response.data})\n        })\n        .catch(function(err) {\n            dispatch({type:\"GET_VOTE_REJECTED\", payload:err})\n        })\n    }\n}\n","// Lib\nimport React, { Component } from 'react'\nimport { Grid, Panel, Col, Form, FormGroup, Checkbox, Button } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\n// Actions\nimport { getTeams } from '../actions/TeamsAction'\nimport { postVote } from '../actions/VoteAction'\n\n// Components\nimport nhlLogo from '../images/nhl.svg'\n\nclass Vote extends Component {\n\n    constructor(props) {\n        super(props)\n\n        this.props.getTeams()\n\n        this.state = {\n            'teamsSelected': [],\n            'errors': ''\n        }\n    }\n\n    onTeamChange(e) {\n        const teamId = e.target.id\n        const checked = e.target.checked\n        let teamsArray = [...this.state.teamsSelected]\n\n        if(checked)\n            teamsArray.push(teamId)\n        else {\n            let teamIndex = teamsArray.indexOf(teamId)\n            teamIndex !== -1 && teamsArray.splice(teamIndex, 1)\n        }\n\n        this.setState({\n            'teamsSelected': teamsArray,\n            'errors': ''\n        })\n    }\n\n    onFormSubmit(e) {\n        e.preventDefault()\n        let teamsLength = this.state.teamsSelected.length\n\n        if(teamsLength < 16) {\n            let teamsDiff = 16 - teamsLength\n            this.setState({\n                'errors': 'Il te manque ' + teamsDiff + ' équipe(s)'\n            })\n        } else if(teamsLength > 16) {\n            let teamsDiff = teamsLength - 16\n            this.setState({\n                'errors': 'Tu as sélectionné ' + teamsDiff + ' équipe(s) en trop'\n            })\n        } else {\n            let vote = {\n                'userID': localStorage.getItem('userID'),\n                'userPseudo': localStorage.getItem('userPseudo'),\n                'teams': this.state.teamsSelected\n            }\n\n            this.props.postVote(vote)\n        }\n    }\n\n    render() {\n        return (\n            <Grid id='vote-form' fluid>\n                <Col xs={12}>\n                    <Panel>\n                        <Panel.Heading>\n                            <Panel.Title componentClass=\"h2\"><img className='nhl-logo' src={nhlLogo} alt='NHL Logo' /> Teams</Panel.Title>\n                        </Panel.Heading>\n                        <Panel.Body>\n                            <Form onSubmit={this.onFormSubmit.bind(this)}>\n                                {this.props.teams.map((teams, i) =>\n                                    <Col xs={6} md={4} lg={3} key={i}>\n                                        <FormGroup>\n                                            <label>\n                                                <img className='teams-logo' src={teams.img} alt={teams.name} />\n                                                {teams.name}\n                                                <Checkbox\n                                                    className='form-checkbox'\n                                                    id={teams._id}\n                                                    name={teams.name}\n                                                    onChange={this.onTeamChange.bind(this)}\n                                                    value={teams.name}\n                                                ></Checkbox>\n                                            </label>\n                                        </FormGroup>\n                                    </Col>\n                                )}\n                                <Col xs={12} className='align-center'>\n                                    <Button type=\"submit\">Submit</Button>\n                                    {this.state.errors !== '' && (<div className=\"invalid-feedback\">{this.state.errors}</div>)}\n                                </Col>\n                            </Form>\n                        </Panel.Body>\n                    </Panel>\n                </Col>\n            </Grid>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        teams: state.teams.teams\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators({\n        getTeams,\n        postVote\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Vote);\n","import React, { Component } from 'react'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\nimport { Col, Panel, Button, FormGroup, InputGroup, FormControl } from 'react-bootstrap'\nimport { findDOMNode } from 'react-dom'\n\nimport { updateUser, logoutUser } from '../actions/Authentication'\n\nclass ChangeUser extends Component {\n\n  constructor(props) {\n    super(props);\n\n    let userID = this.props.id\n\n    this.state = {\n      userID: userID,\n      modifyUser: false\n    }\n  }\n\n  modifyUser() {\n    this.setState({modifyUser: !this.state.modifyUser})\n  }\n\n  changeUser() {\n    let newUserInfos = {\n      nom: findDOMNode(this.refs.newNom).value,\n      prenom: findDOMNode(this.refs.newPrenom).value,\n      pseudo: findDOMNode(this.refs.newPseudo).value,\n      email: findDOMNode(this.refs.newEmail).value\n    }\n    this.props.updateUser(this.state.userID, newUserInfos)\n    this.props.logoutUser()\n  }\n\n  render() {\n    return (\n      <Col xs={6} xsOffset={3}>\n        <Panel>\n          <Panel.Heading>\n            <Panel.Title componentClass=\"h2\">Modifie tes informations de compte</Panel.Title>\n          </Panel.Heading>\n          <Panel.Body>\n            {this.state.modifyUser ?\n              <ul>\n                <li>\n                  <FormGroup controlId=\"newNom\">\n                    <InputGroup>Change ton Nom :</InputGroup>\n                    <FormControl\n                      type='text'\n                      defaultValue={this.props.nom}\n                      ref='newNom' />\n                  </FormGroup>\n                </li>\n                <li>\n                  <FormGroup controlId=\"newPrenom\">\n                    <InputGroup>Change ton Prénom :</InputGroup>\n                    <FormControl\n                      type='text'\n                      defaultValue={this.props.prenom}\n                      ref='newPrenom' />\n                  </FormGroup>\n                </li>\n                <li>\n                  <FormGroup controlId=\"newPseudo\">\n                    <InputGroup>Change ton pseudo :</InputGroup>\n                    <FormControl\n                      type='text'\n                      defaultValue={this.props.pseudo}\n                      ref='newPseudo' />\n                  </FormGroup>\n                </li>\n                <li>\n                  <FormGroup controlId=\"newEmail\">\n                    <InputGroup>Change ton email :</InputGroup>\n                    <FormControl\n                      type='text'\n                      defaultValue={this.props.email}\n                      ref='newEmail' />\n                  </FormGroup>\n                </li>\n                <li>\n                  <Button onClick={this.changeUser.bind(this)}>Sauvegarder</Button>\n                  <Button onClick={this.modifyUser.bind(this)}>Annuler</Button>\n                </li>\n                <li><p>Attention tu seras déconnecté automatiquement afin de faire la mise à jour. Il faudra te connecter à nouveau.</p></li>\n              </ul> :\n              <ul>\n                <li>nom : {this.props.nom}</li>\n                <li>prénom : {this.props.prenom}</li>\n                <li>pseudo : {this.props.pseudo}</li>\n                <li>email : {this.props.email}</li>\n                <li><Button onClick={this.modifyUser.bind(this)}>Modifier</Button></li>\n              </ul>\n            }\n          </Panel.Body>\n        </Panel>\n      </Col>\n    )\n  }\n}\n\nfunction mapDispatchToProps(dispatch) {\n  return bindActionCreators({\n    updateUser, logoutUser\n  }, dispatch);\n}\n\nexport default connect(null, mapDispatchToProps)(ChangeUser);\n","import React, { Component } from 'react'\nimport { Col, Panel } from 'react-bootstrap'\nimport { connect } from 'react-redux'\nimport { bindActionCreators } from 'redux'\n\nimport { getTeams } from '../actions/TeamsAction'\n\nclass UserVote extends Component {\n    constructor(props) {\n        super(props)\n\n        this.props.getTeams()\n    }\n\n    render() {\n        const teamsSelected = (this.props.allTeams.map((team, i) => {\n            let teamsArray = this.props.teams\n            let teamsIndex = teamsArray.indexOf(team._id)\n\n            if (teamsIndex !== -1) return (<Col xs={6} key={i}><img className=\"teams-logo\" src={team.img} alt={team.name} /> {team.name}</Col>)\n            return true\n        }))\n\n        return (\n            <Col xs={12} md={8} mdOffset={2}>\n                <Panel>\n                    <Panel.Heading>\n                        <Panel.Title componentClass=\"h2\">Voici ton vote pour les Playoffs</Panel.Title>\n                    </Panel.Heading>\n                    <Panel.Body>\n                        {teamsSelected}\n                    </Panel.Body>\n                </Panel>\n            </Col>\n        )\n    }\n}\n\nconst mapStateToProps = state => {\n    return {\n        allTeams: state.teams.teams\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return bindActionCreators({\n        getTeams\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(UserVote);\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { bindActionCreators } from 'redux';\nimport { Grid, Col } from 'react-bootstrap';\n\nimport { getUser } from '../actions/Authentication';\nimport { getVote } from '../actions/VoteAction';\n\nimport ChangeUser from '../components/ChangeUser';\nimport UserVote from '../components/UserVote';\n\nexport class MonCompte extends Component {\n\n    constructor(props) {\n        super(props);\n        let userPseudo = localStorage.getItem(\"userPseudo\");\n        let userID = localStorage.getItem(\"userID\");\n\n        this.state = {\n            userPseudo: userPseudo,\n            userID: userID,\n            modifyName: false\n        }\n    }\n\n    componentDidMount() {\n        const userID = { id: this.state.userID }\n        this.props.getUser(userID)\n        this.props.getVote(this.state.userID)\n    }\n\n    render() {\n        return (\n            <Grid id=\"mon-compte\" className=\"vertical-middle\" fluid>\n                <Col xs={12}>\n                    <h1 className=\"align-center\">Voici ton compte {this.state.userPseudo}</h1>\n                    {this.props.userData.map((user, i) => <ChangeUser key={i} {...user} />)}\n                </Col>\n                <Col xs={12}>\n                    {this.props.userVote.map((vote, i) => <UserVote key={i} {...vote} />)}\n                </Col>\n            </Grid>\n        )\n    }\n}\n\nfunction mapStateToProps(state){\n    return {\n        userData: state.auth.user,\n        userVote: state.vote.userVote\n    }\n}\n\nfunction mapDispatchToProps(dispatch) {\n    return bindActionCreators({\n        getUser,\n        getVote\n    }, dispatch);\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MonCompte);\n","import React from 'react'\nimport { Switch, Route } from 'react-router-dom'\n\nimport Signup from \"./components/Signup\"\nimport Signin from \"./components/Signin\"\nimport Vote from \"./components/Vote\"\nimport MonCompte from \"./components/MonCompte\"\n\nconst Main = () => (\n    <main>\n        <Switch>\n            <Route exact path='/' component={Signup}/>\n            <Route path='/signin' component={Signin}/>\n            <Route path='/vote' component={Vote}/>\n            <Route path='/monCompte' component={MonCompte}/>\n        </Switch>\n    </main>\n)\n\nexport default Main\n","import React, { Component } from 'react'\nimport FullNavbars from './FullNavbars'\nimport Content from './Content'\n\nclass App extends Component {\n    render() {\n        return (\n            <section>\n                <FullNavbars />\n                <Content />\n            </section>\n        )\n    }\n}\n\nexport default App;\n","const initialeState = {\n    teams: [],\n    error: null\n}\n\nexport const TeamsReducer = (state=initialeState, action) => {\n    switch (action.type) {\n        case 'GET_TEAMS':\n            return {...state, teams:[...action.payload]};\n        case \"GET_TEAMS_REJECTED\":\n            return action.payload\n        default: {\n            return state\n        }\n    }\n}\n","const initialeState = {\n    vote: [],\n    userVote: []\n}\n\nexport const VoteReducer = (state=initialeState, action) => {\n    switch (action.type) {\n        case 'POST_VOTE':\n            return {...state, vote:[...state.vote, action.payload]}\n        case \"POST_VOTE_REJECTED\":\n            return action.payload\n        case 'GET_VOTE':\n            return {...state, userVote:[...action.payload]};\n        case \"GET_VOTE_REJECTED\":\n            return action.payload\n        default: {\n            return state\n        }\n    }\n}\n","export const isEmpty = (value) => {\n  return (\n    value === undefined ||\n    value === null ||\n    (typeof value === 'object' && Object.keys(value).length === 0) ||\n    (typeof value === 'string' && value.trim().length === 0)\n  );\n}\n","import { SET_CURRENT_USER } from '../actions/Types';\nimport { isEmpty } from '../hocs/is-empty';\n\nconst initialState = {\n  isAuthenticated: false,\n  user: []\n}\n\nexport function authReducer(state = initialState, action ) {\n  switch(action.type) {\n    case SET_CURRENT_USER:\n    return {\n      ...state,\n      isAuthenticated: !isEmpty(action.payload),\n      user: [action.payload]\n    }\n    default:\n    return state;\n  }\n}\n","import { GET_ERRORS } from '../actions/Types';\n\nconst initialState = {};\n\nexport function errorReducer(state = initialState, action ) {\n  switch(action.type) {\n    case GET_ERRORS:\n      return action.payload;\n\n    default:\n      return state;\n  }\n}\n","import { combineReducers } from 'redux'\nimport { TeamsReducer } from './TeamsReducer'\nimport { VoteReducer } from './VoteReducer'\nimport { authReducer } from './AuthReducer'\nimport { errorReducer } from './ErrorReducer'\n\nexport default combineReducers({\n    teams: TeamsReducer,\n    vote: VoteReducer,\n    errors: errorReducer,\n    auth: authReducer\n})\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","// Library import\nimport React from 'react'\nimport ReactDOM from 'react-dom'\nimport { BrowserRouter } from 'react-router-dom'\nimport { Provider } from 'react-redux'\n\n// CSS import\nimport './style/index.css'\n\n// Component import\nimport App from './App'\n\n// Reducers Import\nimport reducers from './reducers/reducers'\n\n// Services import\nimport * as serviceWorker from './serviceWorker'\n\n// Middlewares import\nimport { applyMiddleware, compose, createStore } from 'redux'\nimport { createLogger } from 'redux-logger'\nimport thunk from 'redux-thunk';\nimport promise from 'redux-promise-middleware'\n\nconst composeEnhancer = window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ || compose;\nconst store = createStore(reducers, composeEnhancer(applyMiddleware(promise(), thunk, createLogger())))\n\nReactDOM.render((\n    <Provider store={store}>\n        <BrowserRouter>\n            <App/>\n        </BrowserRouter>\n    </Provider>\n), document.getElementById('root'))\n\nexport default store;\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/nhl.266661c7.svg\";"],"sourceRoot":""}